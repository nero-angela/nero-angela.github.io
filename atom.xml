<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>🐈 Nero&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://nero.devstory.co.kr/"/>
  <updated>2019-12-01T13:23:30.692Z</updated>
  <id>https://nero.devstory.co.kr/</id>
  
  <author>
    <name>Nero</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS AR 어플리케이션 만들기 - 2부</title>
    <link href="https://nero.devstory.co.kr/2019/11/25/pj-too-real-02/"/>
    <id>https://nero.devstory.co.kr/2019/11/25/pj-too-real-02/</id>
    <published>2019-11-25T10:06:24.000Z</published>
    <updated>2019-12-01T13:23:30.692Z</updated>
    
    <content type="html"><![CDATA[<p>iOS에서 제공하는 ARKit과 SceneKit을 이용하여 AR 어플리케이션을 만들어 보도록 하겠습니다.<br><a id="more"></a></p><p>iOS 어플리케이션 개발을 위해 맥북과 아이폰까지 구매하였기 때문에 무조건 iOS 앱을 만들 계획입니다.<br>기본적으로 Apple에서 제공하는 <a href="https://developer.apple.com/documentation/arkit/placing_objects_and_handling_3d_interaction" target="_blank" rel="external nofollow noopener noreferrer">Sample Code - Placing Objects and Handling 3D Interaction</a>를 이용해서 구현하도록 하겠습니다.</p><ul><li>Swift</li><li>ARKit</li><li>SceneKit</li><li>CoreML</li><li>Vision</li></ul><div class="figure " style><video class="fig-video" autoplay playsinline loop controls alt="ARKit plane detection"><source src="/assets/videos/01.plane_detection.mp4" type="video/mp4"><p>Your browser doesn't support HTML5 Video :/</p></video><span class="caption">ARKit plane detection</span></div><div class="figure " style><video class="fig-video" autoplay playsinline loop controls alt="object recommendation"><source src="/assets/videos/02.object_recommendation.mp4" type="video/mp4"><p>Your browser doesn't support HTML5 Video :/</p></video><span class="caption">object recommendation</span></div><div class="figure " style><video class="fig-video" autoplay playsinline loop controls alt="install object"><source src="/assets/videos/03.install_object.mp4" type="video/mp4"><p>Your browser doesn't support HTML5 Video :/</p></video><span class="caption">install object</span></div><div class="figure " style><video class="fig-video" autoplay playsinline loop controls alt="install scnlight"><source src="/assets/videos/04.install_scnlight.mp4" type="video/mp4"><p>Your browser doesn't support HTML5 Video :/</p></video><span class="caption">install scnlight</span></div><div class="figure " style><video class="fig-video" autoplay playsinline loop controls alt="remove scnlight"><source src="/assets/videos/05.remove_scnlight.mp4" type="video/mp4"><p>Your browser doesn't support HTML5 Video :/</p></video><span class="caption">remove scnlight</span></div><div class="figure " style><video class="fig-video" autoplay playsinline loop controls alt="shadow rendering and object interaction"><source src="/assets/videos/06.shadow_rendering_and_object_interaction.mp4" type="video/mp4"><p>Your browser doesn't support HTML5 Video :/</p></video><span class="caption">shadow rendering and object interaction</span></div><h1 id="1부-조명의-위치와-밝기를-인식하여-AR-가상물체를-더욱-현실감있게-표현하는-iOS-앱만들기"><a href="#1부-조명의-위치와-밝기를-인식하여-AR-가상물체를-더욱-현실감있게-표현하는-iOS-앱만들기" class="headerlink" title="1부. 조명의 위치와 밝기를 인식하여 AR 가상물체를 더욱 현실감있게 표현하는 iOS 앱만들기"></a>1부. 조명의 위치와 밝기를 인식하여 AR 가상물체를 더욱 현실감있게 표현하는 iOS 앱만들기</h1><h2 id="목표"><a href="#목표" class="headerlink" title="목표"></a>목표</h2><ul><li>3d model은 정적인 그림자를 가지고 있어 현실감이 떨어짐</li><li>이를 현실 조명에 기반하여 동적이게 그림자를 랜더링하는 iOS AR 앱을 만드는것이 목표!</li><li>완성 동영상 및 기능 보여주기</li><li>ARKit, SceneKit, CoreML, Vision 이용</li></ul><h3 id="기능"><a href="#기능" class="headerlink" title="기능"></a>기능</h3><ul><li>기능 명세<ul><li>벽과 바닥 인지 및 구분</li></ul></li></ul><h2 id="구현"><a href="#구현" class="headerlink" title="구현"></a>구현</h2><ul><li><a href>sample</a> 이거를 기본으로 함</li></ul><h3 id="virtual-object-설치"><a href="#virtual-object-설치" class="headerlink" title="virtual object 설치"></a>virtual object 설치</h3><ul><li><p>3D 모델 추가</p><ul><li>여기서 다운 &amp; 이 프로그램으로 스케일 조정 및 scn으로 추출</li></ul></li><li><p>벽과 바닥용 object 나누기</p></li><li><p>설치완료!</p></li><li><p>문제</p><ul><li>sample도 그렇고 대부분의 3d model은 정적인 그림자를 가지고 있음.</li><li>이렇게이렇게 해결할거임</li></ul></li></ul><h3 id="가상-조명-설치"><a href="#가상-조명-설치" class="headerlink" title="가상 조명 설치"></a>가상 조명 설치</h3><ul><li><p>현실 조명의 위치와 밝기를 virtual world에 그대로 표현하는게 목표</p></li><li><p>조명의 위치 탐지</p><ul><li>google vision api -&gt; 이미지상에 조명 존재여부 확인</li><li>조명 존재시 중앙으로 레이를 쏴서 ar world tracking의 feature 좌표를 받아옴</li></ul></li><li><p>조명의 밝기 탐지</p><ul><li>ARKit의 Light Estimation에 두개의 값이 있음</li></ul></li><li><p>이렇게 확보한 위치와 밝기에 해당하는 조명을 SceneKit의 SCNLight를 설치</p><ul><li>짠! 위치에 따라서 조명이 현실과 같이 변함</li></ul></li><li><p>개선 필요사항</p><ul><li>google vision으로 설치하는 조명 위치는 부정확함</li><li>프로세스가 리얼타임이 아님</li><li>이를 yolo v3 딥러닝 모델을 이용하여 해결할거임</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;iOS에서 제공하는 ARKit과 SceneKit을 이용하여 AR 어플리케이션을 만들어 보도록 하겠습니다.&lt;br&gt;
    
    </summary>
    
    
      <category term="Project" scheme="https://nero.devstory.co.kr/categories/Project/"/>
    
    
      <category term="iOS" scheme="https://nero.devstory.co.kr/tags/iOS/"/>
    
      <category term="Object Detection" scheme="https://nero.devstory.co.kr/tags/Object-Detection/"/>
    
      <category term="Deep Learning" scheme="https://nero.devstory.co.kr/tags/Deep-Learning/"/>
    
      <category term="YOLO v3" scheme="https://nero.devstory.co.kr/tags/YOLO-v3/"/>
    
      <category term="AR" scheme="https://nero.devstory.co.kr/tags/AR/"/>
    
  </entry>
  
  <entry>
    <title>딥러닝을 이용하여 더욱 현실감 있는 AR 앱 만들기 - 1부</title>
    <link href="https://nero.devstory.co.kr/2019/11/24/pj-too-real-01/"/>
    <id>https://nero.devstory.co.kr/2019/11/24/pj-too-real-01/</id>
    <published>2019-11-24T07:44:28.000Z</published>
    <updated>2019-12-01T15:26:32.941Z</updated>
    
    <content type="html"><![CDATA[<p>딥러닝을 이용하여 더욱 현실감 있는 AR 앱을 개발한 이야기를 공유합니다.<br><a id="more"></a></p><!-- > **목차**- [✔︎ 1부. 딥러닝을 이용하여 더욱 현실감 있는 AR 앱 만들기](#)- [2부. iOS AR 어플리케이션 만들기]()- [3부. YOLO v3를 이용하여 조명 인식 딥러닝 모델 만들기]()- [4부. CoreML을 이용하여 iOS 앱에 딥러닝 모델 올리기]() --><hr><h1 id="1-프로젝트-소개"><a href="#1-프로젝트-소개" class="headerlink" title="1. 프로젝트 소개"></a>1. 프로젝트 소개</h1><p><strong>AR(Augmented Reality)</strong>을 이용한 다양한 어플리케이션들이 출시되고 있습니다. 이러한 AR 어플리케이션들은 Android에서는 <a href="https://developers.google.com/ar" target="_blank" rel="external nofollow noopener noreferrer">ARCore</a>를 그리고 iOS에서는 <a href="https://developer.apple.com/kr/augmented-reality/arkit/" target="_blank" rel="external nofollow noopener noreferrer">ARKit</a>를 통해 구현할 수 있습니다.</p><div class="figure " style="width:;"><a class="fancybox" href="https://user-images.githubusercontent.com/26322627/69536166-d2067f00-0fc0-11ea-8883-b9ae5509869a.png" target="_blank" rel="external nofollow noopener noreferrer" title="IKEA에서 출시한 AR 어플리케이션 Place<br>출처 : <a href=https://mobile-ar.reality.news/>https://mobile-ar.reality.news</a>" data-caption="IKEA에서 출시한 AR 어플리케이션 Place<br>출처 : <a href=https://mobile-ar.reality.news/>https://mobile-ar.reality.news</a>" data-fancybox="default style=" visible: hidden"><img class="fig-img" src="https://user-images.githubusercontent.com/26322627/69536166-d2067f00-0fc0-11ea-8883-b9ae5509869a.png" alt="IKEA에서 출시한 AR 어플리케이션 Place<br>출처 : <a href=https://mobile-ar.reality.news/>https://mobile-ar.reality.news</a>"></a><span class="caption">IKEA에서 출시한 AR 어플리케이션 Place<br>출처 : <a href="https://mobile-ar.reality.news/" rel="external nofollow noopener noreferrer" target="_blank">https://mobile-ar.reality.news</a></span></div><p>이번 프로젝트는 iOS의 ARKit를 이용하여 AR 어플리케이션을 구현하였는데, 추가로 딥러닝을 이용하여 AR 오브젝트들의 그림자를 더욱 현실감 있게 구현해보았습니다.</p><blockquote><p>시작하기에 앞서 프로젝트에 사용된 어플리케이션은 Apple에서 제공하는 Sample Code인 <a href="https://developer.apple.com/documentation/arkit/placing_objects_and_handling_3d_interaction" target="_blank" rel="external nofollow noopener noreferrer">Placing Objects and Handling 3D Interaction</a>의 일부 코드를 이용하여 만들었음을 밝힙니다.</p></blockquote><hr><h2 id="1-1-프로젝트-목표"><a href="#1-1-프로젝트-목표" class="headerlink" title="1.1 프로젝트 목표"></a>1.1 프로젝트 목표</h2><p>대부분의 AR에 사용되는 3D 모델들은 아래 Apple Sample Code인 <a href="https://developer.apple.com/documentation/arkit/placing_objects_and_handling_3d_interaction" target="_blank" rel="external nofollow noopener noreferrer">Placing Objects and Handling 3D Interaction</a>에 사용된 램프 모델과 같이 고정된 그림자 이미지를 가지고 있습니다. 이러한 고정된 그림자는 보통 어떠한 상황에서도 어색하지 않을 범용적인 형태의 그림자를 가지고 있지만, 상황에 따라 주변 물체들과 이질감이 느껴집니다.</p><div class="figure " style="width:;"><a class="fancybox" href="https://user-images.githubusercontent.com/26322627/69901403-6d826000-13c4-11ea-9282-4b58dac120ac.png" target="_blank" rel="external nofollow noopener noreferrer" title="Apple의 Sample Code에 사용된 램프 모델<br>출처 - <a href=https://developer.apple.com/documentation/arkit/placing_objects_and_handling_3d_interaction>Placing Objects and Handling 3D Interaction</a>" data-caption="Apple의 Sample Code에 사용된 램프 모델<br>출처 - <a href=https://developer.apple.com/documentation/arkit/placing_objects_and_handling_3d_interaction>Placing Objects and Handling 3D Interaction</a>" data-fancybox="default style=" visible: hidden"><img class="fig-img" src="https://user-images.githubusercontent.com/26322627/69901403-6d826000-13c4-11ea-9282-4b58dac120ac.png" alt="Apple의 Sample Code에 사용된 램프 모델<br>출처 - <a href=https://developer.apple.com/documentation/arkit/placing_objects_and_handling_3d_interaction>Placing Objects and Handling 3D Interaction</a>"></a><span class="caption">Apple의 Sample Code에 사용된 램프 모델<br>출처 - <a href="https://developer.apple.com/documentation/arkit/placing_objects_and_handling_3d_interaction" rel="external nofollow noopener noreferrer" target="_blank">Placing Objects and Handling 3D Interaction</a></span></div><p>가끔 고정된 그림자 이미지가 아닌, 임의의 가상 조명을 생성하여 오브젝트에 그림자를 그려주는 몇몇 AR 어플리케이션들이 있지만, 가상 조명의 위치나 밝기가 현실에 존재하는 광원과 달라 몰입감이 떨어지는건 마찬가지였습니다.</p><p>가상 오브젝트의 색감 또는 그림자가 주변 물체와 이질감이 느껴지는 원인은, 현실에 있는 조명들의 <strong>위치</strong>와 <strong>밝기</strong> 정보가 가상 오브젝트에 반영되어 랜더링 되지 않았기 때문이라고 생각하였습니다. 따라서 이번 프로젝트의 목표를 다음과 같이 정의하였습니다.</p><blockquote><p>✔︎ 프로젝트 목표<br>현실의 조명의 위치와 밝기 정보를 반영하여, 더욱 현실감 있는 AR 어플리케이션 만들어보자!</p></blockquote><hr><h1 id="2-프로젝트-결과물"><a href="#2-프로젝트-결과물" class="headerlink" title="2. 프로젝트 결과물"></a>2. 프로젝트 결과물</h1><p>백문이 불여일견이니 먼저 어플리케이션 작동 영상을 보시겠습니다.</p><iframe width="100%" height="500" src="https://www.youtube.com/embed/1RMhd_r3AuQ?cc_load_policy=1" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><!-- iOS 앱은 [App Store](https://apps.apple.com/kr/app/tooreal/id1473239669)에 게시해 두었습니다. --><hr><h2 id="2-1-개발환경"><a href="#2-1-개발환경" class="headerlink" title="2.1 개발환경"></a>2.1 개발환경</h2><p>전체 개발 기간은 3개월이 소요되었습니다.</p><blockquote><p>✔︎ 개발 환경<br>IDE : XCode / Jupyter Notebook<br>iOS : ARKit / SceneKit / Vision / CoreML<br>Deep Learning : YOLO v3 / Keras / Tensorflow<br>Data : Bounding box 이미지 1만장</p></blockquote><hr><h2 id="2-2-기능소개"><a href="#2-2-기능소개" class="headerlink" title="2.2 기능소개"></a>2.2 기능소개</h2><p>현실 공간을 스캔하고, 가상의 3D Object를 설치하는것 까지는 IKEA의 PLACE 앱과 동일합니다.<br>하지만 추가적으로 <a href="https://pjreddie.com/darknet/yolo/" target="_blank" rel="external nofollow noopener noreferrer">YOLO v3</a>라는 실시간 물체추적(Object Detection) 딥러닝 모델을 이용하여 현실에 있는 조명의 상태와 위치를 실시간으로 파악하여 가상 오브젝트의 그림자와 질감을 더욱 현실감 있게 만들어주는 기능을 추가하였습니다.</p><p>전체적인 기능을 나열하면 다음과 같습니다.</p><blockquote><p>✔︎ 기능명세</p><ul><li>벽과 바닥 탐지</li><li>벽과 바닥에 설치가능한 제품 추천</li><li>가상 오브젝트 설치 및 인터렉션</li><li>5개 class의 실시간 조명 탐지(Bounding Box, Confidence)</li><li>범용적인 조명 탐지를 위한 Google Vision API 연동</li></ul></blockquote><p>앞으로 4부에 걸쳐 iOS 앱 개발 부터 딥러닝 모델 탑재까지 공유하도록 하겠습니다.</p><!-- > **목차**- [✔︎ 1부. 딥러닝을 이용하여 더욱 현실감 있는 AR 앱 만들기](#)- [2부. iOS AR 어플리케이션 만들기 - 작성중]()- [3부. YOLO v3를 이용하여 조명 인식 딥러닝 모델 만들기 - 작성중]()- [4부. CoreML을 이용하여 iOS 앱에 딥러닝 모델 올리기 - 작성중]() -->]]></content>
    
    <summary type="html">
    
      &lt;p&gt;딥러닝을 이용하여 더욱 현실감 있는 AR 앱을 개발한 이야기를 공유합니다.&lt;br&gt;
    
    </summary>
    
    
      <category term="Project" scheme="https://nero.devstory.co.kr/categories/Project/"/>
    
    
      <category term="iOS" scheme="https://nero.devstory.co.kr/tags/iOS/"/>
    
      <category term="Object Detection" scheme="https://nero.devstory.co.kr/tags/Object-Detection/"/>
    
      <category term="Deep Learning" scheme="https://nero.devstory.co.kr/tags/Deep-Learning/"/>
    
      <category term="YOLO v3" scheme="https://nero.devstory.co.kr/tags/YOLO-v3/"/>
    
      <category term="AR" scheme="https://nero.devstory.co.kr/tags/AR/"/>
    
  </entry>
  
  <entry>
    <title>Python Itertools</title>
    <link href="https://nero.devstory.co.kr/2019/11/09/pl-python-itertools/"/>
    <id>https://nero.devstory.co.kr/2019/11/09/pl-python-itertools/</id>
    <published>2019-11-09T09:47:24.000Z</published>
    <updated>2019-11-30T15:54:44.908Z</updated>
    
    <content type="html"><![CDATA[<p>이번 포스팅에서는 Python 2.7과 3.5부터 탑제된 <code>itertools</code>의 유용하고 자주 쓸만한 함수들을 익혀보도록 하겠습니다.<br><a id="more"></a></p><blockquote><p><strong>1. Iterators terminating on the shortest input sequence</strong></p></blockquote><ul><li><input checked disabled type="checkbox"> <a href="#accumulate">1.1 accumulate</a></li><li><input checked disabled type="checkbox"> <a href="#compress">1.2 compress</a></li><li><input checked disabled type="checkbox"> <a href="#dropwhile">1.3 dropwhile</a></li><li><input checked disabled type="checkbox"> <a href="#groupby">1.4 groupby</a></li><li><input checked disabled type="checkbox"> <a href="#takewhile">1.5 takewhile</a></li><li><input checked disabled type="checkbox"> <a href="#zip_longest">1.6 zip_longest</a></li></ul><blockquote><p><strong>2. Combinatoric iterators</strong></p></blockquote><ul><li><input checked disabled type="checkbox"> <a href="#product">2.1 product</a></li><li><input checked disabled type="checkbox"> <a href="#permutations">2.2 permutations</a></li><li><input checked disabled type="checkbox"> <a href="#combinations">2.3 combinations</a></li><li><input checked disabled type="checkbox"> <a href="#combinations_with_replacement">2.4 combinations_with_replacement</a></li></ul><p>시작하기에 앞서 다음과 같이 <code>itertools</code> 모듈을 import하여, 이후 코드에서는 <code>it</code>라고 사용하겠습니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools <span class="keyword">as</span> it</span><br></pre></td></tr></table></figure><hr><h1 id="1-Iterators-terminating-on-the-shortest-input-sequence"><a href="#1-Iterators-terminating-on-the-shortest-input-sequence" class="headerlink" title="1. Iterators terminating on the shortest input sequence"></a>1. Iterators terminating on the shortest input sequence</h1><hr><h2 id="1-1-accumulate-🔗"><a href="#1-1-accumulate-🔗" class="headerlink" title="1.1 accumulate 🔗 "></a>1.1 accumulate <a href="https://docs.python.org/ko/3.8/library/itertools.html#itertools.accumulate" target="_blank" rel="external nofollow noopener noreferrer">🔗</a> <a name="accumulate"></a></h2><blockquote><p>배열을 받아, 누적 합으로 이루어진 배열을 반환합니다.<br>(기본적으로 sum을 하나, 별도의 operator function을 인자로 줄 수 있습니다.)</p></blockquote><p>python3.8에서는 initial 인자가 추가되었습니다.</p><figure class="highlight python"><figcaption><span>python 버전 별 accumulate 함수</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python3.8</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">accumulate</span><span class="params">(iterable, func=operator.add, *, initial=None)</span>:</span></span><br><span class="line">    it = iter(iterable)</span><br><span class="line">    total = initial</span><br><span class="line">    <span class="keyword">if</span> initial <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            total = next(it)</span><br><span class="line">        <span class="keyword">except</span> StopIteration:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">yield</span> total</span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> it:</span><br><span class="line">        total = func(total, element)</span><br><span class="line">        <span class="keyword">yield</span> total</span><br><span class="line"></span><br><span class="line"><span class="comment"># python 3.7 이하</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">accumulate</span><span class="params">(iterable, func=operator.add)</span>:</span></span><br><span class="line">    it = iter(iterable)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        total = next(it)</span><br><span class="line">    <span class="keyword">except</span> StopIteration:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">yield</span> total</span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> it:</span><br><span class="line">        total = func(total, element)</span><br><span class="line">        <span class="keyword">yield</span> total</span><br></pre></td></tr></table></figure><figure class="highlight python"><figcaption><span>자연수 배열 예제입니다.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> it.accumulate([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]):</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">1  # 1</span></span><br><span class="line"><span class="string">3  # 1 + 2</span></span><br><span class="line"><span class="string">6  # 1 + 2 + 3</span></span><br><span class="line"><span class="string">10 # 1 + 2 + 3 + 4</span></span><br><span class="line"><span class="string">15 # 1 + 2 + 3 + 4 + 5</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><figcaption><span>숫자 뿐만 아니라 문자열도 연산 가능합니다.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> it.accumulate([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>]):</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">a</span></span><br><span class="line"><span class="string">ab</span></span><br><span class="line"><span class="string">abc</span></span><br><span class="line"><span class="string">abcd</span></span><br><span class="line"><span class="string">abcde</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p>다른 함수를 인자로 주어 다양한 연산도 가능합니다.</p><figure class="highlight python"><figcaption><span>operator의 곱하기 합수를 주었습니다.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> operator <span class="keyword">as</span> op</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> it.accumulate([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>], op.mul):</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">1   # 1</span></span><br><span class="line"><span class="string">2   # 1 * 2</span></span><br><span class="line"><span class="string">6   # 1 * 2 * 3</span></span><br><span class="line"><span class="string">24  # 1 * 2 * 3 * 4</span></span><br><span class="line"><span class="string">120 # 1 * 2 * 3 * 4 * 5</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><figcaption><span>max 함수를 이용하여 다음과 같은 연산도 가능합니다.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> it.accumulate([<span class="number">1</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">7</span>], max):</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">8</span></span><br><span class="line"><span class="string">8</span></span><br><span class="line"><span class="string">8</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><hr><h2 id="1-2-compress-🔗"><a href="#1-2-compress-🔗" class="headerlink" title="1.2 compress 🔗 "></a>1.2 compress <a href="https://docs.python.org/ko/3.8/library/itertools.html#itertools.compress" target="_blank" rel="external nofollow noopener noreferrer">🔗</a> <a name="compress"></a></h2><blockquote><p>문자열과 True/False 배열을 받아서, True인 인덱스의 문자열 값만 반환합니다.</p></blockquote><br><figure class="highlight python"><figcaption><span>python3.8 compress function</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compress</span><span class="params">(data, selectors)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (d <span class="keyword">for</span> d, s <span class="keyword">in</span> zip(data, selectors) <span class="keyword">if</span> s)</span><br></pre></td></tr></table></figure><figure class="highlight python"><figcaption><span>배열에서 첫 번째와 세 번째 인자만 True이므로 a와 c만 반환했습니다.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> it.compress(<span class="string">'abcd'</span>, [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>]):</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">a</span></span><br><span class="line"><span class="string">b</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><hr><h2 id="1-3-dropwhile-🔗"><a href="#1-3-dropwhile-🔗" class="headerlink" title="1.3 dropwhile 🔗 "></a>1.3 dropwhile <a href="https://docs.python.org/ko/3.8/library/itertools.html#itertools.dropwhile" target="_blank" rel="external nofollow noopener noreferrer">🔗</a> <a name="dropwhile"></a></h2><blockquote><p>function과 iterable을 받아서 False 처음 등장하기 전까지는 모두 버리고, 나머지를 반환합니다.</p></blockquote><figure class="highlight python"><figcaption><span>python3.8 dropwhile function</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dropwhile</span><span class="params">(predicate, iterable)</span>:</span></span><br><span class="line">    iterable = iter(iterable)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> iterable:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> predicate(x):</span><br><span class="line">            <span class="keyword">yield</span> x</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> iterable:</span><br><span class="line">        <span class="keyword">yield</span> x</span><br></pre></td></tr></table></figure><figure class="highlight python"><figcaption><span>5번째 인자인 6이 나오기 전까지는 True를 반환하므로 모두 버리고 6과 4만 출력되었습니다.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> it.dropwhile(<span class="keyword">lambda</span> x: x&lt;<span class="number">5</span>, [<span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">4</span>]):</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">6</span></span><br><span class="line"><span class="string">4</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><hr><h2 id="1-4-takewhile-🔗"><a href="#1-4-takewhile-🔗" class="headerlink" title="1.4 takewhile 🔗 "></a>1.4 takewhile <a href="https://docs.python.org/ko/3.8/library/itertools.html#itertools.takewhile" target="_blank" rel="external nofollow noopener noreferrer">🔗</a> <a name="takewhile"></a></h2><blockquote><p><code>dropwhile</code>과 반대로 처음 False가 등장할 때까지만 반환합니다.</p></blockquote><figure class="highlight python"><figcaption><span>python3.8 takewhile function</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">takewhile</span><span class="params">(predicate, iterable)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> iterable:</span><br><span class="line">        <span class="keyword">if</span> predicate(x):</span><br><span class="line">            <span class="keyword">yield</span> x</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><figcaption><span>5번째 인자인 6이 나오기 전까지만 True를 반환하므로 6부터 나머지는 반환하지 않습니다.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> it.takewhile(<span class="keyword">lambda</span> x: x&lt;<span class="number">5</span>, [<span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">4</span>]):</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">4</span></span><br><span class="line"><span class="string">3</span></span><br><span class="line"><span class="string">4</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><hr><h2 id="1-5-groupby-🔗"><a href="#1-5-groupby-🔗" class="headerlink" title="1.5 groupby 🔗 "></a>1.5 groupby <a href="https://docs.python.org/ko/3.8/library/itertools.html#itertools.groupby" target="_blank" rel="external nofollow noopener noreferrer">🔗</a> <a name="groupby"></a></h2><blockquote><p>문자열을 입력받아 연속하여 등장하는 문자열을 그룹으로 묶어서 반환합니다.</p></blockquote><figure class="highlight python"><figcaption><span>python3.8 groupby class</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">groupby</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, iterable, key=None)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            key = <span class="keyword">lambda</span> x: x</span><br><span class="line">        self.keyfunc = key</span><br><span class="line">        self.it = iter(iterable)</span><br><span class="line">        self.tgtkey = self.currkey = self.currvalue = object()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.id = object()</span><br><span class="line">        <span class="keyword">while</span> self.currkey == self.tgtkey:</span><br><span class="line">            self.currvalue = next(self.it)    <span class="comment"># Exit on StopIteration</span></span><br><span class="line">            self.currkey = self.keyfunc(self.currvalue)</span><br><span class="line">        self.tgtkey = self.currkey</span><br><span class="line">        <span class="keyword">return</span> (self.currkey, self._grouper(self.tgtkey, self.id))</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_grouper</span><span class="params">(self, tgtkey, id)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> self.id <span class="keyword">is</span> id <span class="keyword">and</span> self.currkey == tgtkey:</span><br><span class="line">            <span class="keyword">yield</span> self.currvalue</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.currvalue = next(self.it)</span><br><span class="line">            <span class="keyword">except</span> StopIteration:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            self.currkey = self.keyfunc(self.currvalue)</span><br></pre></td></tr></table></figure><figure class="highlight python"><figcaption><span>groupby()는 각 그룹의 문자열과 해당 문자열이 반복된 리스트를 반환합니다.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> k, g <span class="keyword">in</span> it.groupby(<span class="string">'AAAABBBCCDAABBB'</span>):</span><br><span class="line">    print(k, list(g))</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">A ['A', 'A', 'A', 'A']</span></span><br><span class="line"><span class="string">B ['B', 'B', 'B']</span></span><br><span class="line"><span class="string">C ['C', 'C']</span></span><br><span class="line"><span class="string">D ['D']</span></span><br><span class="line"><span class="string">A ['A', 'A']</span></span><br><span class="line"><span class="string">B ['B', 'B', 'B']</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><hr><h2 id="1-6-zip-longest-🔗"><a href="#1-6-zip-longest-🔗" class="headerlink" title="1.6 zip_longest 🔗 "></a>1.6 zip_longest <a href="https://docs.python.org/ko/3.8/library/itertools.html#itertools.zip_longest" target="_blank" rel="external nofollow noopener noreferrer">🔗</a> <a name="zip_longest"></a></h2><blockquote><p>내장함수 zip과 달리 가장 <strong>긴 인자</strong>를 기준으로 zip 연산을 합니다.</p></blockquote><figure class="highlight python"><figcaption><span>python3.8 zip_longest function</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">zip_longest</span><span class="params">(*args, fillvalue=None)</span>:</span></span><br><span class="line">    iterators = [iter(it) <span class="keyword">for</span> it <span class="keyword">in</span> args]</span><br><span class="line">    num_active = len(iterators)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> num_active:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        values = []</span><br><span class="line">        <span class="keyword">for</span> i, it <span class="keyword">in</span> enumerate(iterators):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                value = next(it)</span><br><span class="line">            <span class="keyword">except</span> StopIteration:</span><br><span class="line">                num_active -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> num_active:</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                iterators[i] = repeat(fillvalue)</span><br><span class="line">                value = fillvalue</span><br><span class="line">            values.append(value)</span><br><span class="line">        <span class="keyword">yield</span> tuple(values)</span><br></pre></td></tr></table></figure><p>zip_longest를 예제에 앞서 내장함수 <code>zip</code>에 대해 알아보겠습니다.</p><blockquote><p><code>zip</code>은 길이가 <strong>짧은 인자</strong>를 기준으로 요소들을 결합한 배열을 반환합니다.</p></blockquote><figure class="highlight python"><figcaption><span>'abc'가 'ㄱㄴㄷㄹㅁ' 보다 길이가 짧으므로 'abc' 기준으로 결과가 반환 된 것을 볼 수 있습니다.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list(zip(<span class="string">'abc'</span>, <span class="string">'ㄱㄴㄷㄹㅁ'</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">[('a', 'ㄱ'), ('b', 'ㄴ'), ('c', 'ㄷ')]</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><figcaption><span>zip_longest는 길이가 긴 'ㄱㄴㄷㄹㅁ'를 기준으로 모자란 부분은 None을 채워서 반환하는 것을 볼 수 있습니다.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list(it.zip_longest(<span class="string">'abc'</span>, <span class="string">'ㄱㄴㄷㄹㅁ'</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">[('a', 'ㄱ'), ('b', 'ㄴ'), ('c', 'ㄷ'), (None, 'ㄹ'), (None, 'ㅁ')]</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><hr><h1 id="Combinatoric-iterators"><a href="#Combinatoric-iterators" class="headerlink" title="# Combinatoric iterators"></a># Combinatoric iterators</h1><hr><h2 id="2-1-product-🔗"><a href="#2-1-product-🔗" class="headerlink" title="2.1 product 🔗 "></a>2.1 product <a href="https://docs.python.org/ko/3.8/library/itertools.html#itertools.product" target="_blank" rel="external nofollow noopener noreferrer">🔗</a> <a name="product"></a></h2><blockquote><p><code>product</code>는 iterable의 곱집합을 구하는 함수입니다.</p></blockquote><figure class="highlight python"><figcaption><span>python3.8 product function</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">product</span><span class="params">(*args, repeat=<span class="number">1</span>)</span>:</span></span><br><span class="line">    pools = [tuple(pool) <span class="keyword">for</span> pool <span class="keyword">in</span> args] * repeat</span><br><span class="line">    result = [[]]</span><br><span class="line">    <span class="keyword">for</span> pool <span class="keyword">in</span> pools:</span><br><span class="line">        result = [x+[y] <span class="keyword">for</span> x <span class="keyword">in</span> result <span class="keyword">for</span> y <span class="keyword">in</span> pool]</span><br><span class="line">    <span class="keyword">for</span> prod <span class="keyword">in</span> result:</span><br><span class="line">        <span class="keyword">yield</span> tuple(prod)</span><br></pre></td></tr></table></figure><figure class="highlight python"><figcaption><span>'ABCD'와 'xy'의 곱집합인 'Ax Ay Bx By Cx Cy Dx Dy'를 반환하는 예제입니다.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">list(it.product(<span class="string">'ABCD'</span>, <span class="string">'xy'</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">[('A', 'x'),</span></span><br><span class="line"><span class="string"> ('A', 'y'),</span></span><br><span class="line"><span class="string"> ('B', 'x'),</span></span><br><span class="line"><span class="string"> ('B', 'y'),</span></span><br><span class="line"><span class="string"> ('C', 'x'),</span></span><br><span class="line"><span class="string"> ('C', 'y'),</span></span><br><span class="line"><span class="string"> ('D', 'x'),</span></span><br><span class="line"><span class="string"> ('D', 'y')]</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><figcaption><span>repeat 인자를 넣어주어 다음이 활용할 수도 있습니다.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">list(it.product(range(<span class="number">2</span>), repeat=<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">[(0, 0, 0),</span></span><br><span class="line"><span class="string"> (0, 0, 1),</span></span><br><span class="line"><span class="string"> (0, 1, 0),</span></span><br><span class="line"><span class="string"> (0, 1, 1),</span></span><br><span class="line"><span class="string"> (1, 0, 0),</span></span><br><span class="line"><span class="string"> (1, 0, 1),</span></span><br><span class="line"><span class="string"> (1, 1, 0),</span></span><br><span class="line"><span class="string"> (1, 1, 1)]</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p>1과 -1로된 크기가 3인 배열의 경우의 수는 다음과 같습니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>),</span><br><span class="line"> (<span class="number">1</span>, <span class="number">1</span>, <span class="number">-1</span>),</span><br><span class="line"> (<span class="number">1</span>, <span class="number">-1</span>, <span class="number">1</span>),</span><br><span class="line"> (<span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>),</span><br><span class="line"> (<span class="number">-1</span>, <span class="number">1</span>, <span class="number">1</span>),</span><br><span class="line"> (<span class="number">-1</span>, <span class="number">1</span>, <span class="number">-1</span>),</span><br><span class="line"> (<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">1</span>),</span><br><span class="line"> (<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>)]</span><br></pre></td></tr></table></figure><p>위 함수를 <code>product</code>를 이용하면 한줄로 만들 수 있습니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list(it.product([<span class="number">1</span>, <span class="number">-1</span>], repeat=<span class="number">3</span>))</span><br></pre></td></tr></table></figure><hr><h2 id="2-2-permutations-🔗"><a href="#2-2-permutations-🔗" class="headerlink" title="2.2 permutations 🔗 "></a>2.2 permutations <a href="https://docs.python.org/ko/3.8/library/itertools.html#itertools.permutations" target="_blank" rel="external nofollow noopener noreferrer">🔗</a> <a name="permutations"></a></h2><blockquote><p><code>순열</code>을 뜻하는 <code>permutations</code>은 n개 중에서 r개를 뽑아 만들 수 있는 순서있는 나열입니다.</p></blockquote><figure class="highlight python"><figcaption><span>python3.8 permutations function</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">permutations</span><span class="params">(iterable, r=None)</span>:</span></span><br><span class="line">    pool = tuple(iterable)</span><br><span class="line">    n = len(pool)</span><br><span class="line">    r = n <span class="keyword">if</span> r <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">else</span> r</span><br><span class="line">    <span class="keyword">if</span> r &gt; n:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    indices = list(range(n))</span><br><span class="line">    cycles = list(range(n, n-r, <span class="number">-1</span>))</span><br><span class="line">    <span class="keyword">yield</span> tuple(pool[i] <span class="keyword">for</span> i <span class="keyword">in</span> indices[:r])</span><br><span class="line">    <span class="keyword">while</span> n:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> reversed(range(r)):</span><br><span class="line">            cycles[i] -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> cycles[i] == <span class="number">0</span>:</span><br><span class="line">                indices[i:] = indices[i+<span class="number">1</span>:] + indices[i:i+<span class="number">1</span>]</span><br><span class="line">                cycles[i] = n - i</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                j = cycles[i]</span><br><span class="line">                indices[i], indices[-j] = indices[-j], indices[i]</span><br><span class="line">                <span class="keyword">yield</span> tuple(pool[i] <span class="keyword">for</span> i <span class="keyword">in</span> indices[:r])</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br></pre></td></tr></table></figure><p>순열의 개수는 다음과 같이 구할 수 있습니다.</p><blockquote><p>nPr = n!/(n-r)!</p></blockquote><figure class="highlight python"><figcaption><span>두 번째 인자는 iterable에서 뽑는 개수이므로 len(iterable) 보다 클 수 없습니다.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">list(it.permutations(<span class="string">'ABCD'</span>, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">[('A', 'B'),</span></span><br><span class="line"><span class="string"> ('A', 'C'),</span></span><br><span class="line"><span class="string"> ('A', 'D'),</span></span><br><span class="line"><span class="string"> ('B', 'A'),</span></span><br><span class="line"><span class="string"> ('B', 'C'),</span></span><br><span class="line"><span class="string"> ('B', 'D'),</span></span><br><span class="line"><span class="string"> ('C', 'A'),</span></span><br><span class="line"><span class="string"> ('C', 'B'),</span></span><br><span class="line"><span class="string"> ('C', 'D'),</span></span><br><span class="line"><span class="string"> ('D', 'A'),</span></span><br><span class="line"><span class="string"> ('D', 'B'),</span></span><br><span class="line"><span class="string"> ('D', 'C')]</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><figcaption><span>r을 생략할 경우 iterable 크기만큼 뽑아서 만들 수 있는 순열을 반환합니다.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list(it.permutations(range(<span class="number">3</span>)))</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">[(0, 1, 2), (0, 2, 1), (1, 0, 2), (1, 2, 0), (2, 0, 1), (2, 1, 0)]</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><hr><h2 id="2-3-combinations-🔗"><a href="#2-3-combinations-🔗" class="headerlink" title="2.3 combinations 🔗 "></a>2.3 combinations <a href="https://docs.python.org/ko/3.8/library/itertools.html#itertools.combinations" target="_blank" rel="external nofollow noopener noreferrer">🔗</a> <a name="combinations"></a></h2><blockquote><p><code>조합</code>을 의미하는 <code>combinations</code>는 n개 중에서 r를 뽑아 만들 수 있는 집합(set)의 나열입니다. (한 번 뽑은 인자는 다시 뽑을 수 없습니다.)</p></blockquote><figure class="highlight python"><figcaption><span>python3.8 combinations function</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">combinations</span><span class="params">(iterable, r)</span>:</span></span><br><span class="line">    pool = tuple(iterable)</span><br><span class="line">    n = len(pool)</span><br><span class="line">    <span class="keyword">if</span> r &gt; n:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    indices = list(range(r))</span><br><span class="line">    <span class="keyword">yield</span> tuple(pool[i] <span class="keyword">for</span> i <span class="keyword">in</span> indices)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> reversed(range(r)):</span><br><span class="line">            <span class="keyword">if</span> indices[i] != i + n - r:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        indices[i] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>, r):</span><br><span class="line">            indices[j] = indices[j<span class="number">-1</span>] + <span class="number">1</span></span><br><span class="line">        <span class="keyword">yield</span> tuple(pool[i] <span class="keyword">for</span> i <span class="keyword">in</span> indices)</span><br></pre></td></tr></table></figure><p>조합의 개수는 다음과 같이 구할 수 있습니다.</p><blockquote><p>nCr = nPr/r! = n!/(r!*(n-r)!)</p></blockquote><figure class="highlight python"><figcaption><span>'ABCD' 네 개중에서 순서를 무시하고 2개를 조합하는 방법은 6가지(4C2) 입니다.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list(it.combinations(<span class="string">'ABCD'</span>, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">[('A', 'B'), ('A', 'C'), ('A', 'D'), ('B', 'C'), ('B', 'D'), ('C', 'D')]</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><hr><h2 id="2-4-combinations-with-replacement-🔗"><a href="#2-4-combinations-with-replacement-🔗" class="headerlink" title="2.4 combinations_with_replacement 🔗 "></a>2.4 combinations_with_replacement <a href="https://docs.python.org/ko/3.8/library/itertools.html#itertools.combinations_with_replacement" target="_blank" rel="external nofollow noopener noreferrer">🔗</a> <a name="combinations_with_replacement"></a></h2><blockquote><p>위에서 설명한 <code>combinations</code>과 달리 한 번 뽑은 인자를 다시 뽑을 수 있는 경우의 조합입니다.</p></blockquote><figure class="highlight python"><figcaption><span>python3.8 combinations_with_replacement</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">pool = tuple(iterable)</span><br><span class="line">n = len(pool)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> n <span class="keyword">and</span> r:</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">indices = [<span class="number">0</span>] * r</span><br><span class="line"><span class="keyword">yield</span> tuple(pool[i] <span class="keyword">for</span> i <span class="keyword">in</span> indices)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> reversed(range(r)):</span><br><span class="line">        <span class="keyword">if</span> indices[i] != n - <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    indices[i:] = [indices[i] + <span class="number">1</span>] * (r - i)</span><br><span class="line">    <span class="keyword">yield</span> tuple(pool[i] <span class="keyword">for</span> i <span class="keyword">in</span> indices)</span><br></pre></td></tr></table></figure><figure class="highlight python"><figcaption><span>'A'를 뽑은 뒤 'A'를 또 뽑을 수 있습니다.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list(it.combinations_with_replacement(<span class="string">'ABC'</span>, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">[('A', 'A'), ('A', 'B'), ('A', 'C'), ('B', 'B'), ('B', 'C'), ('C', 'C')]</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><hr><h1 id="결론"><a href="#결론" class="headerlink" title="# 결론"></a># 결론</h1><p>직접 코드로 구현하는데 상당한 시간이 걸리는 함수들을 <code>Itertools</code>를 이용하여 손쉽게 이용할 수 있습니다.<br>본 포스팅에서 설명하지 않은 함수들은 <a href="https://docs.python.org/ko/3.8/library/itertools.html#module-itertools" target="_blank" rel="external nofollow noopener noreferrer">공식문서</a>를 참고하시기 바랍니다.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;이번 포스팅에서는 Python 2.7과 3.5부터 탑제된 &lt;code&gt;itertools&lt;/code&gt;의 유용하고 자주 쓸만한 함수들을 익혀보도록 하겠습니다.&lt;br&gt;
    
    </summary>
    
    
      <category term="Program Language" scheme="https://nero.devstory.co.kr/categories/Program-Language/"/>
    
    
      <category term="python" scheme="https://nero.devstory.co.kr/tags/python/"/>
    
      <category term="itertools" scheme="https://nero.devstory.co.kr/tags/itertools/"/>
    
  </entry>
  
</feed>
